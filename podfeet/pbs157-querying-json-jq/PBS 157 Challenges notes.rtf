{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Avenir-Book;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww16840\viewh18540\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 PBS 157 Querying JSON with jq - challenges\
\
Using NobelPrizes.json, can you develop jq commands to answer the following questions:\
\
1. What prize did friend of the NosillaCast podcast Dr. Andrea Ghez win? List the year, category, and motivation.\
2. How many laureates were there for each prize? List the year, category, and number of winners for each.\
3. Which prizes were won outright, i.e. not shared? List the year, category, first name, last name, and motivation for each.\
\
# Need to see format first\
\

\f1 jq type NobelPrizes.json # Returns "object"
\f0 \
\
We know objects have keys, so:\
\

\f1 jq 'keys' NobelPrizes.json 
\f0 \
Returns\
\

\f1 [\
  "prizes"\
]
\f0 \
\
# Bart buddy programming\
\
Now that we know it's an array containing [prizes], we can ask it for the first element of the array [0] to see the structure of what's inside.\
\

\f1 jq '.prizes[0]' NobelPrizes.json
\f0 \
\
This gives us the object for the most recent year:\
\

\f1 \{\
  "year": "2023",\
  "category": "chemistry",\
  "laureates": [\
    \{\
      "id": "1029",\
      "firstname": "Moungi",\
      "surname": "Bawendi",\
      "motivation": "\\"for the discovery and synthesis of quantum dots\\"",\
      "share": "3"\
    \},\
    \{\
      "id": "1030",\
      "firstname": "Louis",\
      "surname": "Brus",\
      "motivation": "\\"for the discovery and synthesis of quantum dots\\"",\
      "share": "3"\
    \},\
    \{\
      "id": "1031",\
      "firstname": "Aleksey",\
      "surname": "Yekimov",\
      "motivation": "\\"for the discovery and synthesis of quantum dots\\"",\
      "share": "3"\
    \}\
  ]\
\}
\f0 \
\
\
# What prize did Andrea win incl year category & motivation\
\
so we want from laureates, for surname=Ghez, firstname=Andrea\
Return the year, category, and motivation\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 j
\f1 q '.prizes[] | select(.year == "2020")' NobelPrizes.json
\f0 \
\
This selects all prizes that are year 2020 and keeps the entire prize Not just the year.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0  jq '.prizes[] | select(any(.laureates[]? ; .surname == "Ghez"))' NobelPrizes.json
\f0 \
\
Returns the entire 2020 prize as a dictionary that includes Andrea (so the physics prize):\
\

\f1 jq '.prizes[] | select(any(.laureates[]? ; .surname == "Ghez")) | .year, .category' NobelPrizes.json\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 \
This gives us the year and category for that one prize\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 jq '.prizes[] | select(any(.laureates[]? ; .surname == "Ghez")) | .year, .category, (.laureates[]? | select(.surname == "Ghez"))' NobelPrizes.json
\f0 \
\
This gives us year and category but also  just Andrea but also Andrea's entire laureate dictionary\
\

\f1 jq '.prizes[] | select(any(.laureates[]? ; .surname == "Ghez")) | .year, .category, (.laureates[]? | select(.surname == "Ghez") | .motivation, .surname)' NobelPrizes.json\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 \
Gives us:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 "2020"\
"physics"\
"\\"for the discovery of a supermassive compact object at the centre of our galaxy\\""\
"Ghez"
\f0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 2. How many laureates were there for each prize? List the year, category, and number of winners for each.\
\
Length should tell us the number of elements in an array\
\

\f1 jq '.prizes[]? | .laureates[]? | length' NobelPrizes.json\

\f0 \
Returns 5 for every prize where there's a laureate. That makes sense I guess because there are 5 elements in each laureate.\
\
Maybe I need to select the surnames to count?\
\

\f1 jq '.prizes[]? | .laureates[]? | .surname | length' NobelPrizes.json
\f0 \
\
That returns the length of the surnames! LOL. Shouldn't have exploded laureates\
\

\f1 jq '.prizes[]? | .laureates | length' NobelPrizes.json
\f0 \
\
Correctly returns the number for each year. Now I need the year, category first\
\

\f1 jq '.prizes[]? | .year, .category, ( .laureates | length)' NobelPrizes.json
\f0 \
\
Woohoo - that's it! First few lines:\
\

\f1 "2023"\
"chemistry"\
3\
"2023"\
"economics"\
1\
"2023"\
"literature"\
1\
"2023"\
"peace"\
1\
"2023"\
"physics"\
3\
"2023"\
"medicine"\
2\
"2022"\
"chemistry"
\f0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}